// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package gen

import (
	"context"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
    month_year,
    slack_uid,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?
)
RETURNING id, month_year, slack_uid, received_likes, received_dislikes, created_at, updated_at
`

type CreateMemberParams struct {
	MonthYear string
	SlackUid  string
	CreatedAt string
	UpdatedAt string
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.MonthYear,
		arg.SlackUid,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.MonthYear,
		&i.SlackUid,
		&i.ReceivedLikes,
		&i.ReceivedDislikes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM members
WHERE id = ?
`

func (q *Queries) DeleteMember(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMember, id)
	return err
}

const findMember = `-- name: FindMember :one
SELECT id, month_year, slack_uid, received_likes, received_dislikes, created_at, updated_at FROM members
WHERE slack_uid = ? AND month_year = ? LIMIT 1
`

type FindMemberParams struct {
	SlackUid  string
	MonthYear string
}

func (q *Queries) FindMember(ctx context.Context, arg FindMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, findMember, arg.SlackUid, arg.MonthYear)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.MonthYear,
		&i.SlackUid,
		&i.ReceivedLikes,
		&i.ReceivedDislikes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findMemberByID = `-- name: FindMemberByID :one
SELECT id, month_year, slack_uid, received_likes, received_dislikes, created_at, updated_at FROM members
WHERE id = ? LIMIT 1
`

func (q *Queries) FindMemberByID(ctx context.Context, id int64) (Member, error) {
	row := q.db.QueryRowContext(ctx, findMemberByID, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.MonthYear,
		&i.SlackUid,
		&i.ReceivedLikes,
		&i.ReceivedDislikes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const mostDislikesReceived = `-- name: MostDislikesReceived :one
SELECT m.id, m.month_year, m.slack_uid, m.received_likes, m.received_dislikes, m.created_at, m.updated_at
FROM members m
WHERE month_year = ?
ORDER BY received_dislikes DESC
LIMIT 1
`

func (q *Queries) MostDislikesReceived(ctx context.Context, monthYear string) (Member, error) {
	row := q.db.QueryRowContext(ctx, mostDislikesReceived, monthYear)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.MonthYear,
		&i.SlackUid,
		&i.ReceivedLikes,
		&i.ReceivedDislikes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const mostLikesReceived = `-- name: MostLikesReceived :one
SELECT m.id, m.month_year, m.slack_uid, m.received_likes, m.received_dislikes, m.created_at, m.updated_at
FROM members m
WHERE month_year = ?
ORDER BY received_likes DESC
LIMIT 1
`

func (q *Queries) MostLikesReceived(ctx context.Context, monthYear string) (Member, error) {
	row := q.db.QueryRowContext(ctx, mostLikesReceived, monthYear)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.MonthYear,
		&i.SlackUid,
		&i.ReceivedLikes,
		&i.ReceivedDislikes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMember = `-- name: UpdateMember :one
UPDATE members
SET received_likes = ?,
received_dislikes = ?,
updated_at = ?
WHERE id = ?
RETURNING id, month_year, slack_uid, received_likes, received_dislikes, created_at, updated_at
`

type UpdateMemberParams struct {
	ReceivedLikes    int64
	ReceivedDislikes int64
	UpdatedAt        string
	ID               int64
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, updateMember,
		arg.ReceivedLikes,
		arg.ReceivedDislikes,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.MonthYear,
		&i.SlackUid,
		&i.ReceivedLikes,
		&i.ReceivedDislikes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
